phase1:
第一题要求修改phase1.o当中数据节的部分，保证能够输出自己的学号。
既然要修改数据节，那么就得知道数据节里面到底有什么东西，利用readelf可以得到以下内容：
  0x00000000 00000000 00000000 00000000 00000000 ................
  0x00000010 00000000 00000000 00000000 00000000 ................
  0x00000020 59326e79 63485362 50486662 6172574a Y2nycHSbPHfbarWJ
  0x00000030 6d4c724f 72685242 4e4b366f 6c464c41 mLrOrhRBNK6olFLA
  0x00000040 4c6a3331 36554d39 465a5058 59734277 Lj316UM9FZPXYsBw
  0x00000050 38446270 474d4c65 704d6d7a 51094b44 8DbpGMLepMmzQ.KD
  0x00000060 41434178 4c707735 51314b09 32633078 ACAxLpw5Q1K.2c0x
  0x00000070 67315271 7746724a 5359354a 43475645 g1RqwFrJSY5JCGVE
  0x00000080 38324341 4c445545 63712046 35566a54 82CALDUEcq F5VjT
  0x00000090 66000000 00000000 00000000 00000000 f...............
然后链接phase1.o和main.o并使用gdb调试，在<do_phase>中，可以看见在<do_phase+16>处调用了<puts@plt>函数，这应该就是输出了，通过输出%rdi寄存器指向的字符串，可以得到如下内容：
  "YsBw8DbpGMLepMmzQ\tKDACAxLpw5Q1K\t2c0xg1RqwFrJSY5JCGVE82CALDUEcq F5VjTf"
可以发现其就是.data段中0x4c处的内容，因此只要把该处修改成学号即可。
修改的关键部分如下：
  0x00000040 4c6a3331 36554d39 465a5058 42323330 Lj316UM9FZPXB230
  0x00000050 34303230 37004c65 704d6d7a 51094b44 40207.LepMmzQ.KD
链接并执行后成功输出学号。

phase2:
第二题要求修改phase2.o当中符号表节内容，并创建生成一个名为"phase2_patch.o"的二进制可重定位目标文件，使其与main.o、phase2.o链接后能够运行和输出（且仅输出）自己的学号。
在正式开始之前，首先先尝试将main.o和phase2.o链接起来，可以发现两者已经可以正常链接了，这就表明，在不修改phase2.o符号表的情况下，直接在phase2_patch.o中定义一个新的变量，要么重定义，要么没有意义。
先不创建phase2_patch.o，直接调试程序。
首先程序在<do_phase+56>处的指令让%rax从0一直增加到9，然后在<do_phase+61>处的指令movzbl -0x12(%rbp, %rax, 1), %eax以及<do_phase+66>处的movzbl %al, %eax翻译为C语言大概是：
char* arr = %rbp - 0x18;
int index = arr[i]; // i从0一直增加到9
查看该处的内存分布情况，可以得到：
0x79  0x68  0x69  0x6a  0x65  0x72  0x73  0x76  0x71
也就是index依次会取这些值。
可以发现在<do_phase+71>处指令movzbl 0x404059(%rax), %eax是从未知的数组中将索引为index的元素取出，然后在<do_phase+83>处，将字符输出。查看0x404059处的内容，可以发现全是0x0，因此我们的目的就是在这个地方依照上述index的值填入我们的学号。
然后查看一下符号表的内容：
Symbol table '.symtab' contains 10 entries:
   Num:    Value          Size Type    Bind   Vis      Ndx Name
     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND
     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS phase2.c
     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1 .text
     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    6 .rodata
     4: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    3 phase_id
     5: 0000000000000020   256 OBJECT  GLOBAL DEFAULT    5 IqLUAJPrUp
     6: 0000000000000000   133 FUNC    GLOBAL DEFAULT    1 do_phase
     7: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND putchar
     8: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND __stack_chk_fail
     9: 0000000000000008     8 OBJECT  GLOBAL DEFAULT    3 phase
其中Num5的变量名称非常可疑，应该就是我们要找的了。它的Ndx为5，通过查看节头部表：
  [Nr] Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  [ 5] .bss              NOBITS           0000000000000000  000000d8
       0000000000000000  0000000000000000  WA       0     0     1
可以看出该变量可能是未初始化或空初始化的全局变量。
我们先编写一个phase2_patch.c文件，由于index的内容是非连续的，因此其内容为：
```C
char IqLUAJPrUp[256] =
  "----------------"    // 0x00
  "----------------"    // 0x10
  "----------------"    // 0x20
  "----------------"    // 0x30
  "----------------"    // 0x40
  "----------------"    // 0x50
  "-----4--230-----"    // 0x60
  "-702--0--B------"    // 0x70
  "----------------";   // 0x80
// 0123456789ABCDEF
```
上面的-只是填充符罢了，整个字符串的大小不满256，剩下的会用'\0'填充。两个连续的""在C中会拼接在一起。
然后尝试将该文件编译链接到main.o和phase2.o中，结果输出以下错误：
/usr/bin/ld: phase2_patch.o:(.data+0x0): multiple definition of `IqLUAJPrUp'; phase2.o:(.bss+0x20): first defined here
collect2: error: ld returned 1 exit status
这表明，IqLUAJPrUp是强符号，已经空初始化了，因此我们需要修改phase2.o的符号表，让链接器认为该变量是外部的。
通过节头部表，可以看出：
  [Nr] Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align  
  [12] .symtab           SYMTAB           0000000000000000  00000160
       00000000000000f0  0000000000000018          13     4     8
符号表的位置位于0x160处，大小为0xf0，由于符号表存储了10个符号，因此每个条目的长度为24字节。因此符号IqLUAJPrUp的起始位置是0x1d8，具体内容如下：
  13 00 00 00  11 00 05 00  20 00 00 00  00 00 00 00  00 01 00 00  00 00 00 00
我们不知道每一个部分表示什么，但是IqLUAJPrUp的Ndx是5，因此可以确定，上面那唯一的0x05就是我们要找的部分，我们的目的是将其替换为UND。查看putchar函数的符号，它就是UND，因此我们只要将0x05设置为putchar对应的值就行了。putchar函数符号表的内容如下：
  27 00 00 00  10 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00
可以看出对应的值为0x00，因此只要设置为0x00即可。设置后的结果为：
  13 00 00 00  11 00 00 00  20 00 00 00  00 00 00 00  00 01 00 00  00 00 00 00
查看符号表的输出结果为：
   Num:    Value          Size Type    Bind   Vis      Ndx Name
     5: 0000000000000020   256 OBJECT  GLOBAL DEFAULT  UND IqLUAJPrUp
现在，再次链接就可以成功通过了，并且执行后成功输出学号。

phase3:
第三题要求修改phase3.o中重定位节的内容，使其与main.o链接后能够运行输出（且仅输出）自己的学号。
首先我们还是直接将phase3.o和main.o链接起来，并查看其汇编代码。可以看见<do_phase>中的内容应该是一个while循环和一个switch case语句。为了方便找出其规律，首先写出其大致的C代码。考虑到一会要修改重定位节，我决定用goto语句而不是switch case语句。
我写出的C语言代码如下：
```C
char ch = 0;
unsigned i = 0;
char index[9] = {0x58, 0x55, 0x4e, 0x4a, 0x45, 0x54, 0x49, 0x41, 0x59};
void* jmp_tab[26] = {
    &&L1b, &&L24, &&L2d, &&L36, &&L3f,  // 1
    &&L45, &&L4b, &&L51, &&L57, &&L5d,  // 2
    &&L63, &&L69, &&L6f, &&L75, &&L7b,  // 3
    &&L81, &&L87, &&L8d, &&L93, &&L99,  // 4
    &&L9f, &&La5, &&Lab, &&Lb1, &&Lb7,  // 5
    &&Lbd                               // 6
    //  1      2      3      4      5
};
while (i <= 8) {
    unsigned idx = index[i];
    idx -= 0x41;
    if (idx > 0x19) goto end;
    goto *jmp_tab[idx];
L1b:    ch = 0x58; goto end;
L24:    ch = 0x68; goto end;
L2d:    ch = 0x42; goto end;
L36:    ch = 0x70; goto end;
L3f:    ch = 0x6d; goto end;
L45:    ch = 0x38; goto end;
L4b:    ch = 0x39; goto end;
L51:    ch = 0x33; goto end;
L57:    ch = 0x59; goto end;
L5d:    ch = 0x4f; goto end;
L63:    ch = 0x37; goto end;
L69:    ch = 0x3e; goto end;
L6f:    ch = 0x3e; goto end;
L75:    ch = 0x31; goto end;
L7b:    ch = 0x7a; goto end;
L81:    ch = 0x57; goto end;
L87:    ch = 0x32; goto end;
L8d:    ch = 0x51; goto end;
L93:    ch = 0x70; goto end;
L99:    ch = 0x30; goto end;
L9f:    ch = 0x54; goto end;
La5:    ch = 0x4d; goto end;
Lab:    ch = 0x34; goto end;
Lb1:    ch = 0x40; goto end;
Lb7:    ch = 0x35; goto end;
Lbd:    ch = 0x36; goto end;
end:
    putchar(ch);
    ++i;
}
```
上面的代码中，标签命名为L1b是因为跳转的位置是0x40121b，其它标签也是同理。
接下来再来看看重定位节的内容，由于switch case的跳转表是位于.rodata的，所以我们只需要看.rela.rodata的内容就行了：
Relocation section '.rela.rodata' at offset 0x498 contains 26 entries:
  Offset          Info           Type           Sym. Value    Sym. Name + Addend
000000000008  000200000001 R_X86_64_64       0000000000000000 .text + 65            # 1
000000000010  000200000001 R_X86_64_64       0000000000000000 .text + 6e            # 2
000000000018  000200000001 R_X86_64_64       0000000000000000 .text + 77            # 3
000000000020  000200000001 R_X86_64_64       0000000000000000 .text + 80            # 4
000000000028  000200000001 R_X86_64_64       0000000000000000 .text + 89            # 5
000000000030  000200000001 R_X86_64_64       0000000000000000 .text + 8f            # 6
000000000038  000200000001 R_X86_64_64       0000000000000000 .text + 95            # 7
000000000040  000200000001 R_X86_64_64       0000000000000000 .text + 9b            # 8
000000000048  000200000001 R_X86_64_64       0000000000000000 .text + a1            # 9
000000000050  000200000001 R_X86_64_64       0000000000000000 .text + a7            # 10
000000000058  000200000001 R_X86_64_64       0000000000000000 .text + ad            # 11
000000000060  000200000001 R_X86_64_64       0000000000000000 .text + b3            # 12
000000000068  000200000001 R_X86_64_64       0000000000000000 .text + b9            # 13
000000000070  000200000001 R_X86_64_64       0000000000000000 .text + bf            # 14
000000000078  000200000001 R_X86_64_64       0000000000000000 .text + c5            # 15
000000000080  000200000001 R_X86_64_64       0000000000000000 .text + cb            # 16
000000000088  000200000001 R_X86_64_64       0000000000000000 .text + d1            # 17
000000000090  000200000001 R_X86_64_64       0000000000000000 .text + d7            # 18
000000000098  000200000001 R_X86_64_64       0000000000000000 .text + dd            # 19
0000000000a0  000200000001 R_X86_64_64       0000000000000000 .text + e3            # 20
0000000000a8  000200000001 R_X86_64_64       0000000000000000 .text + e9            # 21
0000000000b0  000200000001 R_X86_64_64       0000000000000000 .text + ef            # 22
0000000000b8  000200000001 R_X86_64_64       0000000000000000 .text + f5            # 23
0000000000c0  000200000001 R_X86_64_64       0000000000000000 .text + fb            # 24
0000000000c8  000200000001 R_X86_64_64       0000000000000000 .text + 101           # 25
0000000000d0  000200000001 R_X86_64_64       0000000000000000 .text + 107           # 26
这个应该就是switch case的跳转表了，在着重开始前，先尝试修改其中一个，也就是把'.text + 65'改成'.text + 6e'试试。
通过节头部表：
  [Nr] Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  [ 7] .rela.rodata      RELA             0000000000000000  00000498
       0000000000000270  0000000000000018   I      13     6     8
可以得知.rela.rodata的内容是从0x498开始的，大小为0x270，每个条目为24字节。
那么第一个条目的二进制内容就为：
  08 00 00 00  00 00 00 00  01 00 00 00  02 00 00 00  65 00 00 00  00 00 00 00
修改为：
  08 00 00 00  00 00 00 00  01 00 00 00  02 00 00 00  6E 00 00 00  00 00 00 00
然后重新链接。
结果可以发现，原来switch case的跳转表（以下称为jmp_tab）的第一个和第二个地址是0x40121b和0x401224的，现在变成了0x401224和0x401224。说明.rela.rodata的第一个条目就对应jmp_tab的第一个地址，以此类推。
为了要显示学号"B23040207"，需要传入putchar()的值如下：
  0x42  0x32  0x33  0x30  0x34  0x30  0x32  0x30  0x37
这些值分别位于以下标签的位置：
  L2d   L87   L51   L99   Lab   L99   L87   L99   L63
由于跳转索引是从char index[9]当中取的，并且取的值会减去0x41，因此取void* jmp_tab[26]的索引分别是：
  23    20    13    9     4     19    8     0     24
命名上述值为index[i]，那么为了跳转到合适的值，就需要修改.rela.rodata中对应行的'.text + '后面的内容，修改方式举例如下：
对于i==0的情况下，由于index[i]为23，那么就应该修改.rela.rodata的第24个条目，也就是：
  0000000000c0  000200000001 R_X86_64_64       0000000000000000 .text + fb
由于要跳转到L2d，它是jmp_tab的第3个元素，因此应该修改为和.rela.rodata的第3个条目中的'.text + '后面的内容一样的内容。第3个条目是：
  000000000018  000200000001 R_X86_64_64       0000000000000000 .text + 77
因此应该将'fb'修改为'77'，其他的也是一样。最后的修改情况总结如下：
    索引    字符    原内容  修改后
    23      B       FB      77
    20      2       E9      D1
    13      3       BF      9B
    9       0       A7      E3
    4       4       89      F5
    19      0       E3      E3
    8       2       A1      D1
    0       0       65      E3
    24      7       101     AD
修改后的.rela.rodata如下所示：
Relocation section '.rela.rodata' at offset 0x498 contains 26 entries:
  Offset          Info           Type           Sym. Value    Sym. Name + Addend
000000000008  000200000001 R_X86_64_64       0000000000000000 .text + e3
000000000010  000200000001 R_X86_64_64       0000000000000000 .text + 6e
000000000018  000200000001 R_X86_64_64       0000000000000000 .text + 77
000000000020  000200000001 R_X86_64_64       0000000000000000 .text + 80
000000000028  000200000001 R_X86_64_64       0000000000000000 .text + f5
000000000030  000200000001 R_X86_64_64       0000000000000000 .text + 8f
000000000038  000200000001 R_X86_64_64       0000000000000000 .text + 95
000000000040  000200000001 R_X86_64_64       0000000000000000 .text + 9b
000000000048  000200000001 R_X86_64_64       0000000000000000 .text + d1
000000000050  000200000001 R_X86_64_64       0000000000000000 .text + e3
000000000058  000200000001 R_X86_64_64       0000000000000000 .text + ad
000000000060  000200000001 R_X86_64_64       0000000000000000 .text + b3
000000000068  000200000001 R_X86_64_64       0000000000000000 .text + b9
000000000070  000200000001 R_X86_64_64       0000000000000000 .text + 9b
000000000078  000200000001 R_X86_64_64       0000000000000000 .text + c5
000000000080  000200000001 R_X86_64_64       0000000000000000 .text + cb
000000000088  000200000001 R_X86_64_64       0000000000000000 .text + d1
000000000090  000200000001 R_X86_64_64       0000000000000000 .text + d7
000000000098  000200000001 R_X86_64_64       0000000000000000 .text + dd
0000000000a0  000200000001 R_X86_64_64       0000000000000000 .text + e3
0000000000a8  000200000001 R_X86_64_64       0000000000000000 .text + d1
0000000000b0  000200000001 R_X86_64_64       0000000000000000 .text + ef
0000000000b8  000200000001 R_X86_64_64       0000000000000000 .text + f5
0000000000c0  000200000001 R_X86_64_64       0000000000000000 .text + 77
0000000000c8  000200000001 R_X86_64_64       0000000000000000 .text + ad
0000000000d0  000200000001 R_X86_64_64       0000000000000000 .text + 107
链接phase3.o和main.o，然后成功输出学号！


