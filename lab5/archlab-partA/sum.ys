# B2304XXXX XXX
# Execution begins at address 0
    .pos 0
    irmovq stack, %rsp  # Set up stack pointer
    call main           # Execute main program
    halt                # Terminate program

# Sample linked list
    .align 8
ele1:
    .quad 0x00a     # long val
    .quad ele2      # struct ELE *next
ele2:
    .quad 0x0b0
    .quad ele3
ele3:
    .quad 0xc00
    .quad 0

main:
    irmovq ele1, %rdi
    call sum_list
    ret

# long sum_list(list_ptr ls)
# ls in %rdi
sum_list:
    irmovq $0x8, %r8    # Constant 8
    irmovq $0x0, %rax   # long val = 0;
    jmp    test
loop:
    mrmovq (%rdi), %rsi     # ls->val
    addq   %rsi, %rax       # val += ls->val
    mrmovq 0x8(%rdi), %rdx  # ls->next
    rrmovq %rdx, %rdi       # ls = ls->next
test:
    andq   %rdi, %rdi
    jne    loop
    ret

# Stack starts here and grows to lower addresses
    .pos 0x200
stack:
